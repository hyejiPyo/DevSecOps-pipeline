name: Terraform Deploy #워크플로우 이름
# main 브랜치에 push가 발생하면 아래 워크플로우가 자동으로 실행
# 코드를 main에 푸시하면 Terraform이 실행
# .github/workflows/terraform.yml

# .github/workflows/terraform.yml
# .github/workflows/terraform.yml
on:
  push:
    branches:
      - main  # main 브랜치에 push될 때만 apply
    paths:
      - '**.tf'
      - '**/terraform.*'
  pull_request:

jobs:
  terraform:
    name: Terraform Init, Security Scan, Plan and Apply
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ap-northeast-2
      TF_VAR_create_jenkins_instance : true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.5

    # 배포 전 Terraform 코드 취약점 분석(tfsec 사용)
    #  - name: Terraform Static Security Scan (tfsec)
    #    uses: aquasecurity/tfsec-action@v1.0.3

    # Trivy Config로 IaC 보안 점검
    #  - name: Terraform Static Security Scan(Trivy)
    #    uses: aquasecurity/trivy-action@master
    #    with:
    #      scan-type: config
    #      scan-ref: .
    #      severity: CRITICAL, HIGH
    #      format : table
    #      output: ./report/terraform-config-scan.txt


      - name: Terraform Init
        run: terraform init -input=false

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan -input=false

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan

      - name: Create Trivy report directory
        run: mkdir -p report

      # Trivy FS 스캔 (라이브러리/OS 취약점)
      - name: Run SCA (Trivy FS Scan)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          severity: CRITICAL,HIGH
          exit-code: 1
          format: json
          output: report/trivy-results.json
          scan-ref: .
          ignore-unfixed: false
          vuln-type: os,library
          cache-dir: ./.cache/trivy
          list-all-pkgs: false
          version: v0.64.1
          cache: true
          skip-setup-trivy: false

        # SBOM 생성
      - name: Generate CycloneDX SBOM with Syft
        uses: anchore/sbom-action@v0.15.4
        with:
          format: cyclonedx-json
          output-file: report/sbom.json

        # 결과물 zip으로 묶기
      - name: Archive all security reports
        run: |
          cd report
          zip -r ../security_reports.zip .

        # 하나의 artifact로 업로드
      - name: Upload all security reports artifact
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: security_reports.zip

  build:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Your Build Step Here
        run: echo "Build Passed"

